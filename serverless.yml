service: ${self:custom.serviceName}

package:
  individually: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  iam:
    role: LambdaRole

functions:
  requestValidationFunction:
    name: ${self:custom.requestValidationFunctionName}
    handler: functions/requestValidation/index.handler
    timeout: 5
    memorySize: 128
    package:
      patterns:
        - 'config.json'
        - common/**
        - functions/requestValidation/**
    lambdaAtEdge:
        distribution: 'CloudFrontDistribution'
        eventType: 'viewer-request'
  responseFunction:
    name: ${self:custom.responseFunctionName}
    handler: functions/response/index.handler
    timeout: 5
    memorySize: 128
    package:
      patterns:
        - 'config.json'
        - common/**
        - functions/response/**
    lambdaAtEdge:
        distribution: 'CloudFrontDistribution'
        eventType: 'origin-response'
  resizeImageFunction:
    name: ${self:custom.resizeImageFunctionName}
    handler: functions/resizeImage/index.handler
    memorySize: 3000
    timeout: 30
    package:
      patterns:
        - 'config.json'
        - common/**
        - functions/resizeImage/**
    events:
      - s3:
          existing: true
          bucket: !Ref ImagesS3Bucket
          event: s3:ObjectCreated:*
          rules:
            - prefix: images/

resources:
  Resources:
    ImagesS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          DefaultCacheBehavior:
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            AllowedMethods:
            - HEAD
            - DELETE
            - POST
            - GET
            - OPTIONS
            - PUT
            - PATCH
            TargetOriginId: ImagesS3BucketOrigin
            ViewerProtocolPolicy: allow-all
          Origins:
          - DomainName: ${self:custom.bucketName}.s3.amazonaws.com
            Id: ImagesS3BucketOrigin
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt OriginAccessControl.Id             
          Enabled: true         

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ImagesS3Bucket
        PolicyDocument:
          ${file(./policies/s3BucketPolicy.yml)}

    OriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Name: ${self:custom.serviceName}${self:custom.stage}
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4

    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: lambdaRole-${self:custom.serviceName}${self:custom.stage}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: 
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: lambdaPolicy-${self:custom.serviceName}${self:custom.stage}
            PolicyDocument:
              ${file(./policies/lambdaPolicy.yml)}

plugins:
  - '@silvermine/serverless-plugin-cloudfront-lambda-edge'	
  - 'serverless-plugin-typescript'
  - serverless-plugin-common-excludes # this should go before serverless-plugin-include-dependencies
  - serverless-plugin-include-dependencies


custom:
  dotenv:
    path: ./config.json
    include:
      - main
  stage: ${opt:stage, '-gamma'}
  serviceName: image-resizer
  bucketName: sinapsis-images-nobile${self:custom.stage}
  requestValidationFunctionName: requestValidation${self:custom.stage}
  resizeImageFunctionName: resizeImage${self:custom.stage}
  responseFunctionName: response${self:custom.stage}
  region: ${file(./config.json):main.region}
  accountNumber: ${file(./config.json):main.accountNumber}